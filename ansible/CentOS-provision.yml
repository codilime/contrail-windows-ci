---
- hosts: localhost
  connection: local
  tasks:
  - name: Add controller to inventory
    add_host:
      name: masterController
      ansible_host: "{{ controllerIP }}"
      ansible_user: root
      ansible_ssh_pass: contrail123
      groups: controller

- hosts: masterController
  pre_tasks:
    - name: Install build dependencies
      package:
        use: yum
        name: "{{ item }}"
        state: latest
      become: true
      with_items:
        - centos-release-openstack-ocata
    - name: Install build dependencies
      package:
        use: yum
        name: "{{ item }}"
        state: latest
      become: true
      with_items:
        - python2-requests
        - git

# - hosts: masterController
#   pre_tasks:
#     - name: Install build dependencies
#       package:
#         name: "{{ item }}"
#         state: latest
#       become: true
#       with_items:
#         - centos-release-openstack-ocata
#     - name: Install build dependencies
#       package:
#         name: "{{ item }}"
#         state: latest
#       become: true
#       with_items:
#         - python2-requests
#         - git
#   roles:
#     - role: contrail-ansible-deployer
#       cloud_orchestrator: openstack
#       openstack_version: ocata
#     - role: kolla-provision-dockers
#       kolla_provision_dir: '/tmp/contrail-kolla-ansible'
#       kolla_config_dir: "{{ kolla_provision_dir }}/etc/kolla"
#       kolla_docker_distro: "ubuntu"
#       openstack_version: "ocata"
#       kolla_version: "contrail_4_1_8"
#   post_tasks:
#     - name: Start all containers that were stopped during kolla docker daemon restart (pass one - network containers)
#       shell: 'docker ps -a  --format "{% raw %}{{.Names}}{% endraw %}" | while read line; do docker start $line; done'
#       ignore_errors: true
#       become: true

#     - name: Start all containers that were stopped during kolla docker daemon restart (pass two - all containers)
#       shell: 'docker ps -a  --format "{% raw %}{{.Names}}{% endraw %}" | while read line; do docker start $line; done'
#       ignore_errors: true
#       become: true

#     - name: Wait for services startup
#       wait_for:
#       timeout: 120

